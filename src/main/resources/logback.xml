<!-- 22.11.12 파일 생성 for SQL 로그 출력 -->
<configuration>

	<!-- Appender : 출력 형식 지정 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{5} - %msg %n</pattern>
		</encoder>
	</appender>
	
	<!-- <logger name="jdbc" level="OFF"/> -->
	
	<logger name="jdbc.sqlonly" level="OFF"/>
	<logger name="jdbc.sqltiming" level="DEBUG"/>
	<logger name="jdbc.audit" level="OFF"/>
	<logger name="jdbc.resultset" level="OFF"/>
	<logger name="jdbc.resultsettable" level="DEBUG"/>
	<logger name="jdbc.connection" level="OFF"/>
	
	<!--
	- jdbc.sqlonly : SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. 
	- jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. 
	- jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. 
	- jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. 
	- jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	- jdbc.connection : jdbc 커넥션의 open, close 마다 로그에 남긴다.
	-->
	
	<root level="INFO">
		<appender-ref ref="CONSOLE" />
	</root>
	<!--
		root 태그는 level이라는 속성을 가지고있다.
	 	해당속성은 log를 찍을 레벨을 설정.
	 	level은 총 5가지 단계로 구별되며 설정된 레벨 이상의 로그만 출력.
	 	TRACE > DEBUG > INFO > WARN > ERROR > FATAL 순
	 	# TRACE : 추적 레벨은 Debug보다 좀더 상세한 정보를 나타냄
		# DEBUG : 프로그램을 디버깅하기 위한 정보 지정
		# INFO :  상태변경과 같은 정보성 메시지를 나타냄 
		# WARN :  처리 가능한 문제, 향후 시스템 에러의 원인이 될 수 있는 경고성 메시지를 나타냄 
		# ERROR :  요청을 처리하는 중 문제가 발생한 경우
		# FATAL :  아주 심각한 에러가 발생한 상태, 시스템적으로 심각한 문제가 발생해서 어플리케이션 작동이 불가능할 경우
	 -->
  
</configuration>